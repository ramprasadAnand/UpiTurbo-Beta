// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name RazorpayTurboUPI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreLocation
import CoreTelephony
import Foundation
import ImageIO
import MessageUI
import OlivePayLibrary
import Security
import Segment
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import os.log
import os
public class DeregisterAccountAPI {
  public init()
  public func deregisterAccount(_ handler: @escaping RazorpayTurboUPI.CallBack<Swift.Bool>)
  @objc deinit
}
public struct Card {
  public let expiryMonth: Swift.String
  public let expiryYear: Swift.String
  public let lastSixDigits: Swift.String
  public init(expiryMonth: Swift.String, expiryYear: Swift.String, lastSixDigits: Swift.String)
}
extension os.OSLog {
  public static let defaultLogCatory: os.OSLog
}
public func printLog(_ items: Any..., log: os.OSLog = .defaultLogCatory, type: os.OSLogType = .debug, fileName: Swift.String = #file, functionName: Swift.String = #function, line: Swift.Int = #line)
public struct CollectRequest {
  public let amount: Swift.String
  public let currency: Swift.String
  public let description: Swift.String?
  public let expireAt: Swift.Int
  public let payer: RazorpayTurboUPI.Beneficiary
  public let payee: RazorpayTurboUPI.VPADetails
  public init(amount: Swift.String, currency: Swift.String, description: Swift.String?, expireAt: Swift.Int, payer: RazorpayTurboUPI.Beneficiary, payee: RazorpayTurboUPI.VPADetails)
}
public class MandateAPI {
  public init()
  public func getPendingMandates(handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.Mandate]>)
  public func getActiveMandates(handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.Mandate]>)
  public func getHistoryMandates(handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.Mandate]>)
  @objc deinit
}
public struct Bank : Swift.Codable {
  public let name: Swift.String?
  public let id: Swift.String?
  public let upiFormat: Swift.String?
  public let isActive: Swift.Bool?
  public let isUpiAvailable: Swift.Bool?
  public let ifsc: Swift.String?
  public let imageURL: Swift.String?
  public var displayName: Swift.String?
  public var bankLogo: Swift.String {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RazorpayTurboUPI.Bank {
  public func getBankAccounts(_ handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.BankAccount]>)
}
extension RazorpayTurboUPI.Bank {
  public static func getBankList(_ handler: @escaping RazorpayTurboUPI.BanksCompletionHandler)
}
@_hasMissingDesignatedInitializers public class TurboUPILoader {
  public func show(view: UIKit.UIView)
  public func hide()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Scenario {
  public var scenarioNumber: Swift.String {
    get
  }
  public var subScenarioNumber: Swift.String {
    get
  }
  public var contactNumber: Swift.String
  public var randomNumber: Swift.Int {
    get
  }
  @objc deinit
}
extension Swift.Double {
  public func toIndianCurrencyFormat(maximumFractionDigits: Swift.Int = 0) -> Swift.String?
}
public struct Concern : Swift.Codable {
  public let transactionId: Swift.String?
  public let entity: Swift.String?
  public let status: Swift.String?
  public let comment: Swift.String?
  public let gatewayReferenceId: Swift.String?
  public let responseCode: Swift.String?
  public let responseDescription: Swift.String?
  public let createdAt: Swift.Int?
  public let transaction: RazorpayTurboUPI.Transaction?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias moneyHandler = RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Transaction>
public struct PauseMandateRequest {
  public init(startDate: Foundation.Date, endDate: Foundation.Date)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ScenerioView : UIKit.UIView, RazorpayTurboUPI.CustomAlertViewProtocol {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var dialogView: UIKit.UIView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) public var backgroundView: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) public func viewDisplayed()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension RazorpayTurboUPI.ScenerioView : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
public struct VPAAvailability : Swift.Codable {
  public let isAvailable: Swift.Bool?
  public let suggestions: [Swift.String]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class TransactionsAPI {
  public init()
  public func getFistTransactionListPage(count: Swift.Int = 5, handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.Transaction]>)
  public func getTransactionList(skip: Swift.Int = 0, count: Swift.Int = 5, handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.Transaction]>)
  public func getFistPendingTransactionListPage(count: Swift.Int = 10, handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.Transaction]>)
  public func getPendingTransactionList(skip: Swift.Int = 0, count: Swift.Int = 10, handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.Transaction]>)
  public func decline(txnObj: RazorpayTurboUPI.Transaction, params: [Swift.String : Any], _ handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Transaction>)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AddBeneficiary : RazorpayTurboUPI.ValidateBeneficiary {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ValidateBeneficiary : Swift.Encodable {
  public static func vpaParameter(address: Swift.String) -> Self?
  public static func bankAccountParameter(beneficiaryName: Swift.String, ifsc: Swift.String, accountNumber: Swift.String) -> Self
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public class func validateAmountTextField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
public struct AccountBalance : Swift.Codable {
  public let balance: Swift.Int?
  public let currency: Swift.String?
  public let id: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PayRequest {
  public enum Source : Swift.String {
    case scan
    case intent
    case p2p
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let amount: Swift.String
  public let currency: Swift.String
  public let description: Swift.String?
  public let beneficiary: RazorpayTurboUPI.Beneficiary?
  public let vpa: RazorpayTurboUPI.VPADetails?
  public let source: RazorpayTurboUPI.PayRequest.Source?
  public let merchantCategory: Swift.String?
  public let url: Swift.String?
  public let transactionId: Swift.String?
  public var additionalDetail: [Swift.String : Any]?
  public init(amount: Swift.String, currency: Swift.String, description: Swift.String?, beneficiary: RazorpayTurboUPI.Beneficiary? = nil, vpa: RazorpayTurboUPI.VPADetails? = nil, source: RazorpayTurboUPI.PayRequest.Source? = nil, merchantCategory: Swift.String? = nil, url: Swift.String? = nil, transactionId: Swift.String? = nil, additionalDetail: [Swift.String : Any]? = nil, orderId: Swift.String? = nil)
}
public protocol CustomAlertViewProtocol {
  func show(animated: Swift.Bool)
  func viewDisplayed()
  func dismiss(animated: Swift.Bool)
  var backgroundView: UIKit.UIView! { get }
  var dialogView: UIKit.UIView! { get set }
}
extension RazorpayTurboUPI.CustomAlertViewProtocol where Self : UIKit.UIView {
  public func show(animated: Swift.Bool)
  public func dismiss(animated: Swift.Bool)
}
@_hasMissingDesignatedInitializers public class SDKPreferencesAPI {
  @objc deinit
}
public typealias CallBack<T> = (T?, (any Swift.Error)?) -> Swift.Void
public enum UpiState : Swift.String {
  case notRegistered
  case registered
  case active
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class RazorpayUpi {
  public var scenario: RazorpayTurboUPI.Scenario?
  public var vpa: RazorpayTurboUPI.VPADetails? {
    get
    set
  }
  public static var shared: RazorpayTurboUPI.RazorpayUpi? {
    get
  }
  public static var bankSDKInitialised: Swift.Bool {
    get
  }
  public var state: RazorpayTurboUPI.UpiState {
    get
  }
  @discardableResult
  public init?(keyId: Swift.String, sessionId: Swift.String, mobileNo: Swift.String, callback: @escaping RazorpayTurboUPI.CallBack<Swift.Bool>)
  @discardableResult
  public init?(keyId: Swift.String, customerId: Swift.String, mHandle: Swift.String, callback: @escaping RazorpayTurboUPI.CallBack<Swift.Bool>)
  public func manageUpiAccounts()
  public func pay(payRequest: RazorpayTurboUPI.PayRequest, _ handler: @escaping RazorpayTurboUPI.moneyHandler)
  public func linkNewAccount(_ handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.VPADetails]>)
  public func linkNewAccount(payRequest: RazorpayTurboUPI.PayRequest?, _ handler: @escaping RazorpayTurboUPI.moneyHandler)
  public func getPopularBanks() -> [RazorpayTurboUPI.PopularBanks]?
  @objc deinit
}
public class ConcernAPI {
  public init()
  public func getConcernsList(_ handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.Concern]>)
  @objc deinit
}
extension Swift.String {
  public var isNotEmpty: Swift.Bool {
    get
  }
  public func index(from: Swift.Int) -> Swift.String.Index
  public func substring(from: Swift.Int) -> Swift.String
  public func substring(wit r: Swift.Range<Swift.Int>) -> Swift.String
  public func toRupeesComma() -> Swift.String
}
public struct PopularBanks : Swift.Codable {
  public var iin: Swift.String
  public var priority: Swift.String
  public var displayName: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class ImageCacheAPI {
  public init()
  public func getImageDetails(url: Foundation.URL, _ handler: @escaping RazorpayTurboUPI.CallBack<Foundation.Data>)
  @objc deinit
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func loadGif(name: Swift.String)
}
public struct VPADetails : Swift.Codable {
  public let id: Swift.String?
  public let address: Swift.String?
  public let handle: Swift.String?
  public let username: Swift.String?
  public let name: Swift.String?
  public let account: RazorpayTurboUPI.BankAccount?
  public let active: Swift.Bool?
  public let validated: Swift.Bool?
  public let verified: Swift.Bool?
  public let isDefault: Swift.Bool?
  public let createdAt: Swift.Int?
  public let deletedAt: Swift.Double?
  public init(entity: Swift.String?, id: Swift.String?, address: Swift.String?, handle: Swift.String?, username: Swift.String?, name: Swift.String?, account: RazorpayTurboUPI.BankAccount?, active: Swift.Bool?, validated: Swift.Bool?, verified: Swift.Bool?, isDefault: Swift.Bool?, createdAt: Swift.Int?, deletedAt: Swift.Double?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RazorpayTurboUPI.VPADetails {
  public static func createDefaultVPA(bankAccount: RazorpayTurboUPI.BankAccount, _ handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.VPADetails]>)
  public static func createVPA(address: Swift.String, bankAccount: RazorpayTurboUPI.BankAccount, _ handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.VPADetails]>)
  public static func checkVPAAvailability(address: Swift.String, handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.VPAAvailability>)
  public static func getVPAList(deletedVPA: Swift.Bool = false, handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.VPADetails]>)
  public func linkVPA(bankAccount: RazorpayTurboUPI.BankAccount, _ handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.VPADetails>)
  public func deleteVPA(_ handler: @escaping RazorpayTurboUPI.CallBack<Swift.Bool>)
  public func setDefault(_ handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.VPADetails>)
  public func delinkVpa(_ handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.VPADetails>)
}
public struct BankAccount : Swift.Codable {
  public let id: Swift.String?
  public let ifsc: Swift.String?
  public let accountNumber: Swift.String?
  public let beneficiaryName: Swift.String?
  public let creds: RazorpayTurboUPI.Creds?
  public let type: Swift.String?
  public var bank: RazorpayTurboUPI.Bank?
  public var accountNumberLast4: Swift.String {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RazorpayTurboUPI.BankAccount {
  public func setupUpiPin(card: RazorpayTurboUPI.Card, handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.BankAccount>)
  public func resetUpiPin(card: RazorpayTurboUPI.Card, handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.BankAccount>)
  public func changeUpiPin(handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.BankAccount>)
}
extension RazorpayTurboUPI.BankAccount {
  public func getBalance(_ handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.AccountBalance>)
}
public enum BeneficiaryType : Swift.String, Swift.Codable {
  case all
  case vpa
  case account
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Beneficiary : Swift.Codable {
  public let validated: Swift.Bool?
  public let verified: Swift.Bool?
  public let type: RazorpayTurboUPI.BeneficiaryType?
  public let id: Swift.String?
  public let address: Swift.String?
  public let name: Swift.String?
  public var isBlocked: Swift.Bool?
  public var isSpammed: Swift.Bool?
  public let blockedAt: Swift.Double?
  public let username: Swift.String?
  public let handle: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RazorpayTurboUPI.Beneficiary {
  public init(vpa: RazorpayTurboUPI.VPADetails)
}
extension RazorpayTurboUPI.Beneficiary {
  public static func getBeneficiaries(_ type: RazorpayTurboUPI.BeneficiaryType, beneficiaries: [RazorpayTurboUPI.Beneficiary]) -> [RazorpayTurboUPI.Beneficiary]
}
extension RazorpayTurboUPI.Beneficiary {
  public static func save(addBeneficiary: RazorpayTurboUPI.AddBeneficiary, handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Beneficiary>)
  public static func validate(validateBeneficiary: RazorpayTurboUPI.ValidateBeneficiary, handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Beneficiary>)
  public static func getBenefeciariesList(_ handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.Beneficiary]>)
  public static func getBlockedBeneficiaries(_ handler: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.Beneficiary]>)
  public func pay(payRequest: RazorpayTurboUPI.PayRequest, _ handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Transaction>)
  public func deleteBeneficiary(_ handler: @escaping RazorpayTurboUPI.CallBack<Swift.Bool>)
  public func unblockBeneficiary(handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Beneficiary>)
  public func requestMoney(collectRequest: RazorpayTurboUPI.CollectRequest, _ handler: @escaping RazorpayTurboUPI.moneyHandler)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public class func fromNib() -> UIKit.UIView
}
public struct Mandate : Swift.Codable {
  public let id: Swift.String?
  public let status: RazorpayTurboUPI.MandateStatus?
  public let active: Swift.Bool?
  public let amount: Swift.Double?
  public let endDate: Swift.Double?
  public let payer: RazorpayTurboUPI.Beneficiary?
  public let recurringType: Swift.String?, recurringRule: Swift.String?
  public let recurringValue: Swift.Double?
  public let type: Swift.String?
  public let umn: Swift.String?, amountRule: Swift.String?
  public let cyclesCompleted: Swift.Int?
  public let upi: RazorpayTurboUPI.Upi?
  public let expiry: Swift.Double?
  public let description: Swift.String?
  public let payee: RazorpayTurboUPI.Beneficiary?
  public let flow: Swift.String?
  public let startDate: Swift.Double?, revokeDate: Swift.Double?, pauseDate: Swift.Double?
  public let currency: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RazorpayTurboUPI.Mandate {
  public func getMandate(handle: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Mandate>)
  public func authorize(handle: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Mandate>)
  public func reject(handle: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Mandate>)
  public func pause(request: RazorpayTurboUPI.PauseMandateRequest, handle: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Mandate>)
  public func resume(handle: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Mandate>)
  public func revoke(handle: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Mandate>)
}
public enum MandateStatus : Swift.String, Swift.Codable {
  case created
  case requested
  case expired
  case initiated
  case approved
  case paused
  case revoked
  case rejected
  case completed
  case failed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TransactionType : Swift.String, Swift.Codable {
  case collect
  case pay
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TransactionStatus : Swift.String, Swift.Codable {
  case pending
  case failed
  case success
  case expired
  case completed
  case created
  case rejected
  case initiated
  case requested
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TransactionFlow : Swift.String, Swift.Codable {
  case credit
  case debit
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Creds : Swift.Codable {
  public let upipin: RazorpayTurboUPI.AccountCredentials?
  public let sms: RazorpayTurboUPI.AccountCredentials?
  public let atmpin: RazorpayTurboUPI.AccountCredentials?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccountCredentials : Swift.Codable {
  public let length: Swift.Int?
  public let isSet: Swift.Bool?
  public init(length: Swift.Int?, isSet: Swift.Bool?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Upi : Swift.Codable {
  public let rrn: Swift.String?
  public let refId: Swift.String?
  public let refUrl: Swift.String?
  public let mcc: Swift.String?
  public let networkTransactionId: Swift.String?
  public let gatewayErrorCode: Swift.String?
  public let gatewayErrorDescription: Swift.String?
  public let createdAt: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Transaction : Swift.Codable {
  public let id: Swift.String?
  public let type: RazorpayTurboUPI.TransactionType?
  public let flow: RazorpayTurboUPI.TransactionFlow?
  public let amount: Swift.Int?
  public let currency: Swift.String?
  public let description: Swift.String?
  public let status: RazorpayTurboUPI.TransactionStatus?
  public let errorCode: Swift.String?
  public let errorDescription: Swift.String?
  public let isConcernEligible: Swift.Bool?
  public let isPendingCollect: Swift.Bool?
  public let initiatedAt: Swift.Double?
  public let expireAt: Swift.Double?
  public let completedAt: Swift.Double?
  public let createdAt: Swift.Double?
  public var payer: RazorpayTurboUPI.Beneficiary?
  public var payee: RazorpayTurboUPI.Beneficiary?
  public let bankAccount: RazorpayTurboUPI.BankAccount?
  public let upi: RazorpayTurboUPI.Upi?
  public let gatewayDescripiton: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension RazorpayTurboUPI.Transaction {
  public func reject(beneficiary: RazorpayTurboUPI.Beneficiary, handle: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Transaction>)
  public func authorize(handle: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Transaction>)
}
extension RazorpayTurboUPI.Transaction {
  public func raiseConcern(concernDescription: Swift.String, handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Concern>)
  public func getConcern(handler: @escaping RazorpayTurboUPI.CallBack<RazorpayTurboUPI.Concern>)
}
public class InitiateVerification {
  public init()
  public func initiateVerification(_ location: Swift.String?, completion: @escaping RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.VPADetails]>, progress: ((Swift.String) -> Swift.Void)?)
  @objc deinit
}
public typealias BanksCompletionHandler = RazorpayTurboUPI.CallBack<[RazorpayTurboUPI.Bank]>
extension UIKit.UIDevice {
  public enum UnsupportedDevices : Swift.String {
    case iPhone6
    case iphone5s
    case iPhone4s
    case iPhone4
    case iPhone5c
    case iPhone5
    case iPhone6Plus
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public static func isValid() -> Swift.Result<Swift.Bool, any Swift.Error>
}
@_hasMissingDesignatedInitializers public class DictionaryEncoder {
  public func encode<T>(_ value: T) throws -> [Swift.String : Any] where T : Swift.Encodable
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DictionaryDecoder {
  public func decode<T>(_ type: T.Type, from obj: Any) throws -> T where T : Swift.Decodable
  @objc deinit
}
public enum URLType : Swift.String, Swift.Codable {
  case bharat
  case upi
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class URLParsedObject : Swift.Codable {
  final public let vpa: Swift.String?
  final public let name: Swift.String?
  final public let remarks: Swift.String?
  final public let amount: Swift.Double?
  final public let currency: Swift.String?
  final public let minimumAmount: Swift.Double?
  final public let transactionId: Swift.String?
  final public let url: Swift.String?
  final public let accountNumber: Swift.String?
  final public let ifsc: Swift.String?
  final public let adhaarNumber: Swift.String?
  final public let qrType: RazorpayTurboUPI.URLType
  final public let merchantCategory: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class QRParser {
  public init()
  public func parseQR(_ stringToParse: Swift.String) -> Swift.Result<RazorpayTurboUPI.URLParsedObject, any Swift.Error>
  @objc deinit
}
extension RazorpayTurboUPI.PayRequest.Source : Swift.Equatable {}
extension RazorpayTurboUPI.PayRequest.Source : Swift.Hashable {}
extension RazorpayTurboUPI.PayRequest.Source : Swift.RawRepresentable {}
extension RazorpayTurboUPI.UpiState : Swift.Equatable {}
extension RazorpayTurboUPI.UpiState : Swift.Hashable {}
extension RazorpayTurboUPI.UpiState : Swift.RawRepresentable {}
extension RazorpayTurboUPI.BeneficiaryType : Swift.Equatable {}
extension RazorpayTurboUPI.BeneficiaryType : Swift.Hashable {}
extension RazorpayTurboUPI.BeneficiaryType : Swift.RawRepresentable {}
extension RazorpayTurboUPI.MandateStatus : Swift.Equatable {}
extension RazorpayTurboUPI.MandateStatus : Swift.Hashable {}
extension RazorpayTurboUPI.MandateStatus : Swift.RawRepresentable {}
extension RazorpayTurboUPI.TransactionType : Swift.Equatable {}
extension RazorpayTurboUPI.TransactionType : Swift.Hashable {}
extension RazorpayTurboUPI.TransactionType : Swift.RawRepresentable {}
extension RazorpayTurboUPI.TransactionStatus : Swift.Equatable {}
extension RazorpayTurboUPI.TransactionStatus : Swift.Hashable {}
extension RazorpayTurboUPI.TransactionStatus : Swift.RawRepresentable {}
extension RazorpayTurboUPI.TransactionFlow : Swift.Equatable {}
extension RazorpayTurboUPI.TransactionFlow : Swift.Hashable {}
extension RazorpayTurboUPI.TransactionFlow : Swift.RawRepresentable {}
extension UIKit.UIDevice.UnsupportedDevices : Swift.Equatable {}
extension UIKit.UIDevice.UnsupportedDevices : Swift.Hashable {}
extension UIKit.UIDevice.UnsupportedDevices : Swift.RawRepresentable {}
extension RazorpayTurboUPI.URLType : Swift.Equatable {}
extension RazorpayTurboUPI.URLType : Swift.Hashable {}
extension RazorpayTurboUPI.URLType : Swift.RawRepresentable {}
